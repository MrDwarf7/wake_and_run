name: "Release"
on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  SCCACHE_GHA_ENABLED: true
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PROJECT_NAME: wake_and_run

jobs:
  build-windows:
    name: "Release - build-windows"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            rust: nightly
    runs-on: ${{ matrix.os }}
    # env:
    # RUSTC_WRAPPER: sccache
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4

      - name: "Install Dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 zip sccache

      # - name: "Setup sccache"
      #   uses: mozilla-actions/sccache-action@v0.0.6

      - name: "Setup Rust toolchain"
        run: rustup toolchain install nightly --profile default --target ${{ matrix.target }} --no-self-update

      # - name: "Cache Cargo dependencies"
      #   uses: Swatinem/rust-cache@v2

      - name: "Check formatting"
        run: cargo +nightly fmt -- --check

      - name: "Run Clippy"
        run: cargo +nightly clippy --target ${{ matrix.target }} --all-targets --all-features -- -D warnings

      - name: "Build binaries"
        run: |
          cargo +nightly build --release --locked --target ${{ matrix.target }} -p checker -p sleep

      - name: "Prepare artifacts"
        run: |
          ARTIFACT_NAME="${{ env.PROJECT_NAME }}-${{ matrix.target }}-${{ github.ref_name }}"
          mkdir -p "$ARTIFACT_NAME"
          cp target/${{ matrix.target }}/release/checker.exe "$ARTIFACT_NAME"
          cp target/${{ matrix.target }}/release/sleep.exe "$ARTIFACT_NAME"
          cp task_creation.ps1 "$ARTIFACT_NAME"
          cp README.md LICENSE "$ARTIFACT_NAME"
          cd "${ARTIFACT_NAME}"
          zip -r "../${ARTIFACT_NAME}.zip" .
          cd ..

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}-${{ github.ref_name }}
          path: ${{ env.PROJECT_NAME }}-${{ matrix.target }}-${{ github.ref_name }}.zip
          if-no-files-found: "error"
          compression-level: "9"

  draft:
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-windows]
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: "Draft Release"
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          draft: true
          files: |
            ${{ env.PROJECT_NAME }}-*
          generate_release_notes: true

  nightly:
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-windows]
    steps:
      - name: Generate nightly body
        run: |
          echo 'NIGHTLY_BODY<<EOF' >> $GITHUB_ENV
          echo "From commit: ${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M") UTC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: "Update nightly tag"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag --force nightly && git push --force origin nightly

      - name: "Create Nightly Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            ${{ env.PROJECT_NAME }}-*
          name: Nightly Build
          body: ${{ env.NIGHTLY_BODY }}
          target_commitish: ${{ github.sha }}
